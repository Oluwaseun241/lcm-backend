// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  phoneNumber   String    @unique
  passcode      String
  name          String
  firstName     String?
  lastName      String?
  dob           DateTime?
  bvn           String?   @unique
  isBvnVerified Boolean   @default(false)
  isVerified    Boolean   @default(false)
  emailVerified Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  wallet        Wallet?
  loans         Loan[]
}

model Wallet {
  id            String    @id @default(uuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  accountNumber String    @unique
  accountName   String
  balance       Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactions  Transaction[]
  bankAccounts  BankAccount[]
}

model Loan {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  amount        Decimal
  interestRate  Float       @default(0.0)
  startDate     DateTime
  endDate       DateTime
  paymentMode   PaymentMode
  guarantor1    Json
  guarantor2    Json
  personalInfo  Json
  status        LoanStatus  @default(pending)
  approvedBy    String?
  approvedAt    DateTime?
  rejectionReason String?
  repaymentSchedule Json?
  totalAmount   Decimal
  remainingAmount Decimal
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  repayments    Repayment[]
}

model Repayment {
  id            String    @id @default(uuid())
  loanId        String
  loan          Loan      @relation(fields: [loanId], references: [id])
  amount        Decimal
  paymentDate   DateTime  @default(now())
  status        PaymentStatus @default(pending)
  paymentMethod String
  reference     String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum PaymentMode {
  daily
  weekly
  monthly
}

enum LoanStatus {
  pending
  declined
  approved
  disbursed
  completed
  defaulted
}

enum PaymentStatus {
  pending
  successful
  failed
}

model Transaction {
  id            String    @id @default(uuid())
  walletId      String
  wallet        Wallet    @relation(fields: [walletId], references: [id])
  type          TransactionType
  amount        Float
  reference     String    @unique
  status        TransactionStatus @default(pending)
  description   String?
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Notification {
  id String @id @default(uuid())
}

model Event {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankAccount {
  id            String    @id @default(uuid())
  walletId      String
  wallet        Wallet    @relation(fields: [walletId], references: [id])
  bankName      String
  accountNumber String
  accountName   String
  isDefault     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum TransactionType {
  TOPUP
  TRANSFER
  WITHDRAWAL
}

enum TransactionStatus {
  pending
  successful
  failed
}
